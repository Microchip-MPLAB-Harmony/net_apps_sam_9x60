var SearchFiles = ["GUID-E9DE90C9-151B-4975-A6F1-B20C092FDE6A.html",
							"GUID-AE0D6F2C-000D-4324-B516-5B5944CCA13A.html",
							"GUID-1D108B42-1627-4E60-9E0D-D46D6EEFF1AB.html",
							"GUID-A50978FB-13F6-44E7-8C99-45EC9F7D4D69.html",
							"GUID-3E206AC3-AFF0-4DC6-81FF-84C27B02DD69.html",
							"GUID-7AFA76E7-631B-4F4F-8A73-1A8B85CD7391.html",
							"GUID-3631EA9B-9786-4FC6-B2A1-93C589DBDF67.html",
							"GUID-3F89C3FD-D211-4F40-AC41-68E83ED88AEE.html",
							"GUID-009563F3-3284-4CBD-AD6D-6E30FD1B6D79.html"];

var SearchTitles = ["MPLAB® Harmony 3 TCP/IP Application for SAM 9X60 Family",
"TCP/IP TCP Client",
"TCP/IP TCP Client Server",
"TCP/IP TCP Server Application",
"TCP/IP UDP Client",
"TCP/IP UDP Client Server",
"TCP/IP UDP Server",
"TCP/IP Web NET Server QSPI MPFS Application",
"TCP/IP WEB-NET Server SDMMC Application"];

var SearchInfo = [" MPLAB® Harmony 3 TCP/IP Application for SAM 9X60 Family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC microcontroller and microprocessor devices This repository contains multiple applications that demonstrate communication over TCP/IP using well known protocols like TCP UDP HTTP SMTP etc Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries Name Description tcpip_tcp_client TCP/IP TCP Client Application tcpip_tcp_client_server TCP/IP TCP Client Server Application tcpip_tcp_server TCP/IP TCP Server Application tcpip_udp_client TCP/IP UDP Client Application tcpip_udp_server TCP/IP UDP Server Application tcpip_udp_client_server TCP/IP UDP Client Server Application web_net_server_qspi_mpfs TCP/IP Secure WEB Server QSPI MPFS Application web_net_server_sdcard_fatfs TCP/IP Secure WEB Server SDCARD FATFS Application ",
							" TCP/IP TCP Client The TCP Client configuration demonstrates creating a network client with the MPLAB Harmony TCP API to make a TCP/IP connection to a web server TCP/IP TCP Client MHC Configuration The following Project Graph diagram shows the Harmony components included in the TCP Client demonstration application MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP Root Layer Project Graph The root layer project shows that DBGU UART peripheral is selected to do read and write operation for TCP/IP commands This is the basic configuration with SYS_CONSOLE SYS_DEBUG and SYS_COMMAND modules These modules are required for TCP/IP command execution tcpip_sam9x60_project FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected NOTE - The above diagram contains FreeRTOS component and that is required for RTOS application For bare-metal(non-RTOS) FreeRTOS component shouldn't be selected tcpip_sam9x60_project TCP sockets calculate the ISN using the wolfSSL crypto library TCP/IP Required Application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server DNS Client provides DNS resolution capabilities to the stack tcpip_sam9x60_project TCPIP Driver Layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP TCP Client Hardware Configuration This section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP TCP Client Running Application This table list the name and location of the MPLAB X IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek_mplabx X SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP TCP Client on development board with SAM9X60 device and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP TCP Client on development board with SAM9X60 device and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation sam_9x60_ek _freertos IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP TCP Client on development board with SAM9X60 device and an on-board KSZ8081 PHY This implementation is based on FreeRTOS Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : After the successful broad bring up the console output becomes tcpip_tcp_client_project For TCP Client test input the following command from the serial port: openurl url - The url argument must be a fully formed URL; for instance http://www microchip com/ For this above URL the DNS module will make a DNS query Then it will open a connection to the requested URL and perform a simple HTTP GET command The response received from the server will be printed on the terminal application through the serial port The expected output - tcpip_tcp_client_project ",
							" TCP/IP TCP Client Server The TCP Client Server configuration demonstrates creating a network client and server that uses the MPLAB Harmony TCP API This demonstration is a combination of the TCP/IP Client and TCP/IP Server application TCP/IP TCP Client Server MHC Configuration The following Project Graph diagram shows the Harmony components included in the TCP Client demonstration application MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP Root Layer Project Graph The root layer project shows that DBGU UART peripheral is selected to do read and write operation for TCP/IP commands This is the basic configuration with SYS_CONSOLE SYS_DEBUG and SYS_COMMAND modules These modules are required for TCP/IP command execution tcpip_sam9x60_project FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected NOTE - The above diagram contains FreeRTOS component and that is required for RTOS application For bare-metal(non-RTOS) FreeRTOS component shouldn't be selected tcpip_sam9x60_project TCP sockets calculate the ISN using the wolfSSL crypto library TCP/IP Required Application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server DNS Client provides DNS resolution capabilities to the stack tcpip_sam9x60_project TCPIP Driver Layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP TCP Client Server Hardware Configuration This section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP TCP Client Server Running Application This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP TCP Client Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation sam_9x60_ek _freertos IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP TCP Client Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This implementation is based on FreeRTOS Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : After the successful broad bring up the console output becomes tcpip_tcp_client_server_project For TCP Client test input the following command from the serial port: openurl url - The url argument must be a fully formed URL; for instance http://www microchip com/ For this above URL the DNS module will make a DNS query Then it will open a connection to the requested URL and perform a simple HTTP GET command The response received from the server will be printed on the terminal application through the serial port The expected output - tcpip_tcp_client_server_project For TCP Server test the TCP Client application is required to run on the computer (SocketTest Packet Sender etc) In this demonstration we use the program SocketTest (http://sockettest sourceforge net/) This demonstration is tested with SocketTest v3 0  Open the SocketTest software and set the configuration as shown in the following figure tcpip_tcp_client_server_project Press the Connect button on the SocketTest software after setting the configuration The serial terminal indicates that the connection has been established Type any message in the message box of the SocketTest program and press the Send button The Server running on the development board will echo back the message to the SocketTest program tcpip_tcp_client_server_project ",
							" TCP/IP TCP Server Application The TCP/IP TCP Server configuration demonstrates creating a network server that uses the MPLAB Harmony TCP API to create a TCP/IP echo server on port 9760 TCP/IP TCP Server MHC Configuration The following Project Graph diagram shows the Harmony components included in the TCP Client demonstration application MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP Root Layer Project Graph The root layer project shows that DBGU UART peripheral is selected to do read and write operation for TCP/IP commands This is the basic configuration with SYS_CONSOLE SYS_DEBUG and SYS_COMMAND modules These modules are required for TCP/IP command execution tcpip_sam9x60_project FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected NOTE - The above diagram contains FreeRTOS component and that is required for RTOS application For bare-metal(non-RTOS) FreeRTOS component shouldn't be selected tcpip_sam9x60_project TCP sockets calculate the ISN using the wolfSSL crypto library TCP/IP Required Application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server DNS Client provides DNS resolution capabilities to the stack tcpip_sam9x60_project TCPIP Driver Layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP TCP Server Hardware Configuration This section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP TCP Server Running Application This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP TCP Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation sam_9x60_ek _freertos IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP TCP Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This implementation is based on FreeRTOS Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : As soon as a valid IP address is assigned through the DHCP to the demonstration it is ready to accept a TCP/IP connection on port 9760 Send a TCP packet to the IP address of the hardware board using port 9760 from any TCP Client application running on the computer The TCP Server demonstration running on the evaluation kit will echo back everything it receives along the connection For TCP Server test the TCP Client application is required to run on the computer (SocketTest Packet Sender etc) In this demonstration we use the program SocketTest (http://sockettest sourceforge net/) This demonstration is tested with SocketTest v3 0  Open the SocketTest software and set the configuration as shown in the following figure tcpip_tcp_server_project Press the Connect button on the SocketTest software after setting the configuration The serial terminal indicates that the connection has been established Type any message in the message box of the SocketTest program and press the Send button The Server running on the development board will echo back the message to the SocketTest program tcpip_tcp_server_project ",
							" TCP/IP UDP Client The UDP Client configuration demonstrates creating a network Client with the API to make a UDP/IP connection to a specified port TCP/IP UDP Client MHC Configuration The following Project Graph diagram shows the Harmony components included in this application demonstration MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP root layer project graph The root layer project shows that DBGU UART peripheral is selected to do read and write operation for TCP/IP commands This is the basic configuration with SYS_CONSOLE SYS_DEBUG and SYS_COMMAND modules These modules are required for TCP/IP command execution tcpip_sam9x60_project FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected NOTE - The above diagram contains FreeRTOS component and that is required for RTOS application For bare-metal(non-RTOS) FreeRTOS component shouldn't be selected tcpip_sam9x60_project TCP/IP Required Application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server DNS Client provides DNS resolution capabilities to the stack tcpip_sam9x60_project TCPIP driver layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP UDP Client Hardware Configuration This section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP UDP Client Running Application This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP UDP Client on development board with SAM9X60 device and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation sam_9x60_ek _freertos IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP UDP Client on development board with SAM9X60 device and an on-board KSZ8081 PHY This implementation is based on FreeRTOS Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : setudppacketoptions  getudppacketoptions and sendudppacket are the UDP client APP commands Set the UDP packet options by typing setudppacketoptions at the terminal console Verify the UDP packet settings by typing getudppacketoptions at the terminal console Send the UDP packet to the destination using the sendudppacket command After the sendudppacket command is input the demonstration will make a DNS query to look up the host name and send a UDP packet to that host The output message will be received by the UDP server on the port that is configured by the command setudppacketoptions  For UDP Client test the UDP Server application is required to run on the computer (SocketTest Packet Sender etc) This demonstration is tested with SocketTest v3 0(http://sockettest sourceforge net/)  Open the SocketTest software and select UDP server for the configured port number as per the command setudppacketoptions  ",
							" TCP/IP UDP Client Server The UDP Client Server configuration demonstrates creating a network client and a network server that uses the MPLAB Harmony UDP API This demonstration shows how the UDP/IP loopback works and it is a combination of the TCP/IP UDP Client and TCP/IP UDP Server application TCP/IP UDP Client Server MHC Configuration The following Project Graph diagram shows the Harmony components included in this application demonstration MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP root layer project graph The root layer project shows that UART2 peripheral is selected to do read and write operation for TCP/IP commands This is the basic configuration with SYS_CONSOLE SYS_DEBUG and SYS_COMMAND modules These modules are required for TCP/IP command execution tcpip_sam9x60_project FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected NOTE - The above diagram contains FreeRTOS component and that is required for RTOS application For bare-metal(non-RTOS) FreeRTOS component shouldn't be selected tcpip_sam9x60_project TCP/IP Required Application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server DNS Client provides DNS resolution capabilities to the stack During these components selection the required transport and network modules are also selected tcpip_sam9x60_project TCPIP driver layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP UDP Client Hardware Configuration This section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP UDP Client Server Running Application This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP UDP Client Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation sam_9x60_ek _freertos IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP UDP Client Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This implementation is based on FreeRTOS There are three sequential commands implemented in this demonstration setudppacketoptions hostname port message - This command specifies the following parameters for the UDP packet: Destination IP Address or Host name Destination Port and Message to transfer getudppacketoptions - This command displays the current options sendudppacket - This command sends a UDP packet Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : Set the UDP packet options by typing setudppacketoptions at the terminal console Verify the UDP packet settings by typing getudppacketoptions at the terminal console Send the UDP packet to the destination using the sendudppacket command After the sendudppacket command is input the demonstration will make a DNS query to look up the host name and send a UDP packet to that host The output message will be received by the UDP server on the port that is configured by the command setudppacketoption  Testing the UDP Server part of demonstration: As soon as a valid IP address is assigned through the DHCP to the demonstration it is ready to accept a UDP/IP connection on port 9760 Send a UDP packet to the IP address of the hardware board and port 9760 from any UDP Client application running on the computer (SocketTest Packet Sender etc) The UDP Server demonstration running on the evaluation kit will echo back everything it receives along the connection ",
							" TCP/IP UDP Server The UDP Server configuration demonstrates creating a network server that uses the MPLAB Harmony UDP API to create a UDP/IP echo server on port 9760 TCP/IP UDP Server MHC Configuration The following Project Graph diagram shows the Harmony components included in this application demonstration MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP root layer project graph The root layer project shows that UART2 peripheral is selected to do read and write operation for TCP/IP commands This is the basic configuration with SYS_CONSOLE SYS_DEBUG and SYS_COMMAND modules These modules are required for TCP/IP command execution tcpip_sam9x60_project FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected NOTE - The above diagram contains FreeRTOS component and that is required for RTOS application For bare-metal(non-RTOS) FreeRTOS component shouldn't be selected tcpip_sam9x60_project TCP/IP Required Application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server DNS Client provides DNS resolution capabilities to the stack During these components selection the required transport and network modules are also selected tcpip_sam9x60_project TCPIP driver layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP UDP Client Hardware Configuration This section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP UDP Server Running Application This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP UDP Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation sam_9x60_ek _freertos IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP UDP Server on development board with SAM9X60 device and an on-board KSZ8081 PHY This implementation is based on FreeRTOS Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : As soon as a valid IP address is assigned through the DHCP to the demonstration it is ready to accept a UDP/IP connection on port 9760 Send a UDP packet to the IP address of the hardware board and port 9760 from any UDP Client application running on the computer (SocketTest Packet Sender etc) The UDP Server demonstration running on the evaluation kit will echo back everything it receives along the connection ",
							" TCP/IP Web NET Server QSPI MPFS Application The Web Net Server MPFS configuration with QSPI peripheral demonstrates creating an HTTP web server on a Microchip evaluation board The Microchip Proprietary File System (MPFS) is used for reading the web pages from the internal Flash and using MPFS upload feature the QSPI flash is updated with new MPFS file This demonstration uses the HTTP_NET server which supports encrypted communication through the NET_PRES layer and an external service provider for TLS support TCP/IP Web NET Server QSPI MPFS MHC Configuration The following Project Graph diagram shows the Harmony components included in the application demonstration MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP root layer project graph The root layer project shows that DBUG UART peripheral is selected to do read and write operation for TCP/IP commands This is the basic configuration with SYS_CONSOLE SYS_DEBUG and SYS_COMMAND modules These modules are required for TCP/IP command execution tcpip_sam9x60_project WolfSSL component is selected for secure connection which supports TLS v1 3 and WolfSSL-Crypto component is selected for MD5 and SHA authentication tcpip_sam9x60_project The file system component is required to select MPFS module This is the below snapshot for the FS configuration tcpip_sam9x60_project FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected TCP sockets calculate the ISN using the wolfSSL crypto library TCP/IP Required Application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server HTTPNET module is selected to run the web_server for the secured port number 443  tcpip_sam9x60_project By default Enable MPFS upload via HTTP is selected This is helpful When external EEPROM or serial Flash is used for storage the option to upload the newly created image to the board is available TCPIP Driver Layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP Web Net Server QSPI MPFS Hardware Configuration This is the section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP Web NET Server QSPI MPFS Running Application The HTTP net server module uses Microchip Proprietary File System (MPFS) to read web pages from the QSPI based peripheral Flash This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the web net server on development board with SAM9X60 device using QSPI based flash media and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : An HTTP server is hosted by the demonstration application Open_a web browser and direct it to the board running the HTTP server by typing the URL in the address bar (for example https://mchpboard_c) and then pressing Enter The demonstration application features following: Real-time Hardware Control and Dynamic Variables - On the Overview page the LEDs can be clicked to toggle the LEDs on the Microchip hardware development board The SWITCHes on the Microchip hardware development board can be pressed to toggle the Buttons on the web page The dynamic variables can be updated in real-time on the HTTP server Note: For the LED and SWITCH functionality portion of the demonstration configure the GPIOs connected to LEDs and Switches on Microchip hardware development board through the Pin Configuration manager in MPLAB® Harmony Configurator (MHC) Form Processing - Input can be handled from the client by using the GET and POST methods (this functionality controls the on-board LEDs and is operational only on the Explorer 16 Development Board) Authentication - Shows an example of the commonly used restricted access feature Cookies - Shows an example of storing small text strings on the client side Server Side Includes - An example of how SSI can be used to support dynamic content File Uploads - Shows an example of a file upload using the POST method The HTTP server can_accept_a user-defined MPFS/MPFS2 image file for web pages Send E-mail - Shows simple SMTP POST methods Dynamic DNS - Exercises Dynamic DNS capabilities Network Configuration - The MAC address host name and IP address of the evaluation kit can be viewed in the Network Configuration page and some configurations can be updated MPFS Upload - A new set of web pages can be uploaded to the web server using this feature which is accessed through http://mchpboard_c/mpfsupload Notes: The location of the MPFS image is fixed at the beginning of the Flash page specified by DRV_MEMORY_DEVICE_START_ADDRESS The size of the MPFS upload is limited to DRV_MEMORY_DEVICE_MEDIA_SIZE in the demonstration The HTTP File Upload functionality has to be enabled when the project is generated tcpip_web_net_server_project ",
							" TCP/IP WEB-NET Server SDMMC Application The Web Net Server SDCard configuration demonstrates creating an HTTP web server on a Microchip evaluation board The FAT FS File System is used for storing the web pages on an external SD Card This demonstration uses the HTTP_NET server which supports encrypted communication through the NET_PRES layer and an external service provider for TLS support TCP/IP Web NET Server SDCARD FATFS MHC Configuration The following Project Graph diagram shows the Harmony components included in the application demonstration MHC is launched by selecting Tools Embedded MPLAB® Harmony 3 Configurator from the MPLAB X IDE and after successful database migration TCP/IP demo project is ready to be configured and regenerated tcpip_sam9x60_project TCP/IP root layer project graph QSPI peripheral with SDSPI driver supports Multimedia card communication SD SPI driver provides abstraction to communicate with SD/eMMC card through the QSPI peripheral library interface The TCP/IP application use FAT file system with SDSPI driver to read/write to/from an SD card tcpip_sam9x60_project WolfSSL component is selected for secure connection which supports TLS v1 3 and WolfSSL-Crypto component is selected for MD5 and SHA authentication tcpip_sam9x60_project Wolfssl crypto module enabled with MD5 SHA authentication Wolfssl library configured with open secured socket FreeRTOS component is required for RTOS application For bare-metal (non-RTOS) FreeRTOS component should not be selected The FAT file system is selected for this application to read and write from the SDHC( sdcard ) module This is the below snapshot for the FAT FS configuration tcpip_sam9x60_project TCP sockets calculate the ISN using the wolfSSL crypto library TCP/IP required application TCP/IP demo use these application module components for this demo Announce module to discover the Microchip devices within a local network DHCP Client module to discover the IPv4 address from the nearest DHCP Server HTTPNET module is selected to run the web_server for the port number 443  tcpip_sam9x60_project TCPIP driver layer Internal ethernet driver(emac0) is enabled with the external KSZ8081 PHY driver library for SAM9X60 demonstartion tcpip_sam9x60_project The MIIM Driver supports asynchronous read/write and scan operations for accessing the external PHY registers and notification when MIIM operations have completed TCP/IP Web NET Server SDMMC FATFS Hardware Configuration This is the section describes the hardware configuration for ATSAM 9X60 Xplained Ultra Evaluation Kit and one can be used for the respective application demonstration This section describes the required default hardware configuration use SAM 9X60 Xplained Ultra Evaluation Kit Refer to the SAM 9X60 Xplained Ultra Evaluation Kit User Guide required_hardware • Insert the SD Card with the \"harmony bin\" output of the project into the SD card slot J5 • Connect the board to a USB port on the test PC by inserting the serial cable into the serial connector J24 • For debugging insert the Atmel SAM-ICE debugger to the JTAG port J23 • Connect the micro USB cable from the computer to the USB Power connector on the SAM9X60-EK to power the board J22 • Establish a connection between the router/switch with the SAM9X60-EK through the RJ45 connector TCP/IP Web NET Server SDCARD FATFS Running Application This Web Net Server application uses the SD card as a memory media and reads the web pages stored according to the configured mount path Web Server reads the external SD card content using FAT FS API This table lists the name and location of the IAR IDE project folder for the demonstration Project Name Target Device Target Development Board Description sam_9x60_ek IAR SAM 9X60 SAM9X60 Xplained Ultra + KSZ8081 PHY Daughter board Demonstrates the TCP/IP Web net server on development board with SAM9X60 device using SDSPI driver with QSPi peripheral and an on-board KSZ8081 PHY This is a bare-metal (non-RTOS) implementation Build the demo by opening the project in the IAR Embedded Workbench Copy the project output harmony bin to the SD card that is used to load the executable and run it on the SAM9X60-EK board Note: the boot loader on the SD card boot bin should be configured to load the harmony bin image not a uboot bin image Running Demonstration Steps Build and download the demonstration project on the target board If the board has a UART connection: A virtual COM port will be detected on the computer when the USB cable is connected to USB-UART connector Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port Set the serial baud rate to 115200 baud in the terminal application Insert the SD card into J5 on the SAM 9X60 board and press the reset button which is labeled ‘SW3’ on the silkscreen At this moment the board should boot and display messages on the terminal console See that the initialization prints on the serial port terminal When the DHCP client is enabled in the demonstration wait for the DHCP server to assign an IP address for the development board This will be printed on the serial port terminal Alternatively: Use the Announce service or ping to get the IP address of the board Run tcpip_discoverer jar to discover the IPv4 and IPv6 address for the board Execution : An HTTP server is hosted by the demonstration application Open_a web browser and direct it to the board running the HTTP server by typing the URL in the address bar (for example https://mchpboard_c) and then pressing Enter The demonstration application features following: Real-time Hardware Control and Dynamic Variables - On the Overview page the LEDs can be clicked to toggle the LEDs on the Microchip hardware development board The SWITCHes on the Microchip hardware development board can be pressed to toggle the Buttons on the web page The dynamic variables can be updated in real-time on the HTTP server Note: For the LED and SWITCH functionality portion of the demonstration configure the GPIOs connected to LEDs and Switches on Microchip hardware development board through the Pin Configuration manager in MPLAB® Harmony Configurator (MHC) Form Processing - Input can be handled from the client by using the GET and POST methods (this functionality controls the on-board LEDs and is operational only on the Explorer 16 Development Board) Authentication - Shows an example of the commonly used restricted access feature Cookies - Shows an example of storing small text strings on the client side Server Side Includes - An example of how SSI can be used to support dynamic content File Uploads - Shows an example of a file upload using the POST method The HTTP server can_accept_a user-defined MPFS/MPFS2 image file for web pages Send E-mail - Shows simple SMTP POST methods Dynamic DNS - Exercises Dynamic DNS capabilities Network Configuration - The MAC address host name and IP address of the evaluation kit can be viewed in the Network Configuration page and some configurations can be updated MPFS Upload - A new set of web pages can be uploaded to the web server using this feature which is accessed through http://mchpboard_c/mpfsupload tcpip_web_net_sdcard_server_project "];

